function ConfigurableParameters = getAlgConfigurableParameters_SPSO_AP_AD()
    % InitialPopulationSize: Total number of particles in the initial swarm.
    ConfigurableParameters.InitialPopulationSize = struct( ...
        'value', 50, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Total number of particles in the initial population.');

    % SwarmMember: Number of particles in each species (sub‑swarm).
    ConfigurableParameters.SwarmMember = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [1, 100], ...
        'description', 'Number of particles per species (sub‑swarm).');

    % NewlyAddedPopulationSize: Number of new particles added when species count < Nmax.
    ConfigurableParameters.NewlyAddedPopulationSize = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of new particles inserted when the number of species is below the maximum.');

    % x: Inertia weight used in velocity update.
    ConfigurableParameters.x = struct( ...
        'value', 0.729843788, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Inertia weight controlling the influence of previous velocity.');

    % c1: Cognitive coefficient influencing personal best attraction.
    ConfigurableParameters.c1 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Cognitive acceleration coefficient scaling attraction to personal best.');

    % c2: Social coefficient influencing global best attraction.
    ConfigurableParameters.c2 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Social acceleration coefficient scaling attraction to species best.');

    % rho: Ratio controlling the maximum deactivation threshold.
    ConfigurableParameters.rho = struct( ...
        'value', 0.7, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Multiplier to set the maximum deactivation distance relative to shift severity.');

    % mu: Ratio controlling the minimum deactivation threshold.
    ConfigurableParameters.mu = struct( ...
        'value', 0.2, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Multiplier to set the minimum deactivation distance relative to problem dimension.');

    % beta: Initial factor for adjusting the deactivation threshold dynamically.
    ConfigurableParameters.beta = struct( ...
        'value', 1, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Initial scaling factor for adaptive deactivation threshold.');

    % gama: Decay rate for updating beta.
    ConfigurableParameters.gama = struct( ...
        'value', 0.1, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Decay factor used to reduce beta over time for threshold adaptation.');

    % Nmax: Maximum allowed number of species before anti‑convergence triggers.
    ConfigurableParameters.Nmax = struct( ...
        'value', 30, ...
        'type', 'integer', ...
        'range', [1, 100], ...
        'description', 'Maximum number of species; if reached, anti‑convergence mechanisms are activated.');
end

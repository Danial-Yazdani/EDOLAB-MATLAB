function ConfigurableParameters = getAlgConfigurableParameters_TMIPSO()
    % PopulationSize: Total number of particles in the initial population.
    ConfigurableParameters.PopulationSize = struct( ...
        'value', 50, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Total number of particles in both exploit and explore populations.');

    % x: Inertia weight used in velocity update.
    ConfigurableParameters.x = struct( ...
        'value', 0.729843788, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Inertia weight controlling influence of previous velocity.');

    % c1: Cognitive coefficient influencing personal best attraction.
    ConfigurableParameters.c1 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Cognitive acceleration coefficient scaling attraction to personal best.');

    % c2: Social coefficient influencing global best attraction.
    ConfigurableParameters.c2 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Social acceleration coefficient scaling attraction to species best.');

    % ExploitPopSize: Number of particles in the exploit sub-swarm.
    ConfigurableParameters.ExploitPopSize = struct( ...
        'value', 20, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Size of the exploit population used for local refinement.');

    % ExplorePopSize: Number of particles in the explore sub-swarm.
    ConfigurableParameters.ExplorePopSize = struct( ...
        'value', 20, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Size of the explore population used for global search.');

    % MemorySize: Maximum number of solutions stored in memory.
    ConfigurableParameters.MemorySize = struct( ...
        'value', 10, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Maximum number of past best solutions retained for triggered memory.');

    % b1: Fitness-change threshold to trigger memory-based reinitialization.
    ConfigurableParameters.b1 = struct( ...
        'value', 0.001, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Threshold on relative fitness change in explore population to activate memory mechanism.');
end
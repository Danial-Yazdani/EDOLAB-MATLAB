function ConfigurableParameters = getAlgConfigurableParameters_DPCPSO()
    % PopulationSize: Total number of individuals at initialization.
    ConfigurableParameters.PopulationSize = struct( ...
        'value', 100, ...
        'type', 'integer', ...
        'range', [1, 1000], ...
        'description', 'Total number of individuals at initialization.');

    % omega_max: Maximum inertia weight.
    ConfigurableParameters.omega_max = struct( ...
        'value', 0.5, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Upper bound on inertia weight for velocity update.');

    % omega_min: Minimum inertia weight.
    ConfigurableParameters.omega_min = struct( ...
        'value', 0.2, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Lower bound on inertia weight for velocity update.');

    % c1: Cognitive coefficient influencing personal best attraction.
    ConfigurableParameters.c1 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Scaling factor for attraction toward each particle’s personal best.');

    % c2: Social coefficient influencing global best attraction.
    ConfigurableParameters.c2 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Scaling factor for attraction toward the sub‑swarm’s global best.');

    % MaxSubPopIterations: Number of local iterations for inertia adaptation.
    ConfigurableParameters.MaxSubPopIterations = struct( ...
        'value', 50, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Local iteration count used to adapt inertia from omega_max to omega_min.');

    % StagnationThreshold: Consecutive no‑improvement steps before reset.
    ConfigurableParameters.StagnationThreshold = struct( ...
        'value', 15, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Maximum consecutive no‑improvement steps before a particle is reinitialized.');

    % ConvergenceThreshold: Radius threshold to declare convergence.
    ConfigurableParameters.ConvergenceThreshold = struct( ...
        'value', 0.1, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Average distance threshold at which a sub‑swarm is considered converged.');

    % QuantumNumber: Number of quantum particles generated per change.
    ConfigurableParameters.QuantumNumber = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of particles sampled around the global best after each environment change.');
end
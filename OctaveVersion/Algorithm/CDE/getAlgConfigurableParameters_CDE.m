function ConfigurableParameters = getAlgConfigurableParameters_CDE()
    % initPopulationSize: Total number of individuals at initialization.
    ConfigurableParameters.initPopulationSize = struct( ...
        'value', 100, ...
        'type', 'integer', ...
        'range', [0, 1000], ...
        'description', 'Total number of individuals at initialization.');

    % CR: Crossover probability for trial vector generation
    ConfigurableParameters.CR = struct( ...
        'value', 0.6, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Probability of inheriting donor vector components during crossover.');

    % F: Scaling factor for differential mutation operations
    ConfigurableParameters.F = struct( ...
        'value', 0.5, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Scaling factor controlling mutation step size in differential evolution.');

    % SwarmNumber: Number of parallel evolving sub-populations
    ConfigurableParameters.SwarmNumber = struct( ...
        'value', 10, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of independent sub-swarms evolving in parallel.');

    % BrownNumber: Quantity of particles performing Brownian exploration
    ConfigurableParameters.BrownNumber = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of worst-performing particles undergoing Brownian motion for diversity.');

    % IndivSize: Population size within each sub-swarm
    ConfigurableParameters.IndivSize = struct( ...
        'value', 10, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of individuals maintained in each sub-population.');

    % ConvergenceLimit: Threshold for sub-swarm convergence detection
    ConfigurableParameters.ConvergenceLimit = struct( ...
        'value', 0.01, ...
        'type', 'numeric', ...
        'range', [0, 0.1], ...
        'description', 'Radius threshold to declare sub-swarm convergence.');

    % OverlapDegree: Threshold for sub-swarm spatial overlap detection
    ConfigurableParameters.OverlapDegree = struct( ...
        'value', 0.1, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Minimum distance between sub-swarms before overlap reinitialization.');

    % DiversityFlag: Mechanism for maintaining population diversity
    % ConfigurableParameters.DiversityFlag = struct( ...
    %     'value', 'Brownian Individuals', ...
    %     'type', 'option', ...
    %     'options', {{'Brownian Individuals', 'Quantum Individuals', 'Normal Individuals'}}, ...
    %     'description', 'Diversity maintenance strategy through particle behavior modification.');

    % RandomFlag: Control strategy for CR/F parameter generation
    ConfigurableParameters.RandomFlag = struct( ...
        'value', 'Fixed CR/F', ...
        'type', 'option', ...
        'options', {{'Random CR/F', 'Fixed CR/F'}}, ...
        'description', 'Parameter generation method for crossover rate and scaling factor.');

    % StrategyFlag: Differential evolution mutation strategies
    ConfigurableParameters.StrategyFlag = struct( ...
        'value', 'DE/BEST/2', ...
        'type', 'option', ...
        'options', {{'Random Strategy', 'DE/RAND/1', 'DE/RAND/2', 'DE/BEST/1', 'DE/BEST/2',...
                    'DE/RAND-TO-BEST/1', 'DE/CURRENT-TO-RAND/1', 'DE/CURRENT-TO-BEST/1'}}, ...
        'description', 'Mutation strategy for generating donor vectors in differential evolution.');
end
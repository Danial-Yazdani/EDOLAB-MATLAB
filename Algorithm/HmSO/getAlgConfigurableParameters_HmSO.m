function ConfigurableParameters = getAlgConfigurableParameters_HmSO()
    % ParentSize: Number of particles in the parent swarm exploring the landscape.
    ConfigurableParameters.ParentSize = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of particles in the parent swarm used to track peaks and seed child swarms.');

    % ChildSize: Number of particles in each child swarm.
    ConfigurableParameters.ChildSize = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of particles maintained in each child swarm after seeding.');

    % w: Inertia weight used in velocity updates for both parent and child populations.
    ConfigurableParameters.w = struct( ...
        'value', 0.729844, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Inertia weight balancing exploration and exploitation.');

    % c1: Cognitive acceleration coefficient scaling influence of personal best.
    ConfigurableParameters.c1 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Scaling factor for each particle''s attraction to its own best position.');

    % c2: Social acceleration coefficient scaling influence of global best.
    ConfigurableParameters.c2 = struct( ...
        'value', 2.05, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Scaling factor for particles'' attraction to the swarm''s best position.');

    % Rpc: Parent‑to‑child communication radius threshold.
    ConfigurableParameters.Rpc = struct( ...
        'value', 10, ...
        'type', 'numeric', ...
        'range', [0, 100], ...
        'description', 'Distance threshold for migrating a parent particle into an existing child swarm.');

    % Rexcl: Exclusion radius below which two child swarms are merged/removed.
    ConfigurableParameters.Rexcl = struct( ...
        'value', 10, ...
        'type', 'numeric', ...
        'range', [0, 100], ...
        'description', 'Distance threshold to identify overlapping child swarms for removal.');

    % Rconv: Radius threshold to declare a child swarm converged.
    ConfigurableParameters.Rconv = struct( ...
        'value', 0.01, ...
        'type', 'numeric', ...
        'range', [0, 10], ...
        'description', 'Sub‑swarm radius below which a child swarm is considered converged.');

    % Rsearch: Fraction of Rpc used when reinitializing parent swarm velocities.
    ConfigurableParameters.Rsearch = struct( ...
        'value', 0.5, ...
        'type', 'numeric', ...
        'range', [0, 10], ...
        'description', 'Proportion of Rpc used to scale initial velocities for reinitialized parent particles.');

    % Margin: Fitness difference margin to trigger child swarm convergence.
    ConfigurableParameters.Margin = struct( ...
        'value', 5, ...
        'type', 'numeric', ...
        'range', [0, 10], ...
        'description', 'Minimum fitness gap below the best child swarm required to mark a child swarm as converged.');
end

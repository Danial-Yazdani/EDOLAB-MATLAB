function ConfigurableParameters = getAlgConfigurableParameters_AMSO()
    % initPopulationSize: Total number of individuals at initialization.
    ConfigurableParameters.initPopulationSize = struct( ...
        'value', 100, ...
        'type', 'integer', ...
        'range', [0, 1000], ...
        'description', 'Total number of individuals at initialization.');

    % maxSubsize: Maximum allowed size of any sub‑swarm before trimming.
    ConfigurableParameters.maxSubsize = struct( ...
        'value', 7, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Maximum particles retained in a sub‑swarm to prevent overcrowding.');

    % w: Inertia weight balancing exploration and exploitation.
    ConfigurableParameters.w = struct( ...
        'value', 0.6, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Inertia coefficient applied to previous velocity.');

    % c1: Cognitive acceleration coefficient.
    ConfigurableParameters.c1 = struct( ...
        'value', 2.83, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Cognitive coefficient scaling attraction to personal best.');

    % c2: Social acceleration coefficient.
    ConfigurableParameters.c2 = struct( ...
        'value', 2.83, ...
        'type', 'numeric', ...
        'range', [0, 5], ...
        'description', 'Social coefficient scaling attraction to global best.');

    % OverlapDegree: Proportion threshold for merging overlapping sub‑swarms.
    ConfigurableParameters.OverlapDegree = struct( ...
        'value', 0.5, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Fraction of overlapping individuals required to merge or remove sub‑swarms.');

    % ConvergenceLimit: Radius threshold to mark a sub‑swarm as converged.
    ConfigurableParameters.ConvergenceLimit = struct( ...
        'value', 1e-4, ...
        'type', 'numeric', ...
        'range', [0, 1], ...
        'description', 'Sub‑swarm radius below which it is considered converged.');

    % TraceGap: Function‑evaluation gap used for diversity tracking.
    ConfigurableParameters.TraceGap = struct( ...
        'value', 1500, ...
        'type', 'integer', ...
        'range', [0, 3000], ...
        'description', 'FE gap interval for monitoring sub‑swarm size changes.');
end

function ConfigurableParameters = getAlgConfigurableParameters_DynPopDE()
    % initPopulationSize: Total number of individuals at initialization.
    ConfigurableParameters.initPopulationSize = struct( ...
        'value', 100, ...
        'type', 'integer', ...
        'range', [0, 500], ...
        'description', 'Total number of individuals at initialization.');

    % CR: Probability of inheriting donor vector components during crossover.
    ConfigurableParameters.CR = struct( ...
        'value', 0.6, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Crossover probability for generating trial vectors in DE.');

    % F: Scaling factor controlling mutation step size in differential evolution.
    ConfigurableParameters.F = struct( ...
        'value', 0.5, ...
        'type', 'numeric', ...
        'range', [0, 2], ...
        'description', 'Mutation scaling factor in donor vector computation.');

    % IndivSize: Population size within each sub‑population.
    ConfigurableParameters.IndivSize = struct( ...
        'value', 10, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Number of individuals maintained in each sub‑population.');

    % BrownNumber: Number of worst‑performing particles undergoing Brownian exploration.
    ConfigurableParameters.BrownNumber = struct( ...
        'value', 5, ...
        'type', 'integer', ...
        'range', [0, 100], ...
        'description', 'Count of particles receiving Brownian perturbation when diversity strategy = Brownian.');

    % ConvergenceLimit: Threshold for sub‑population convergence detection.
    ConfigurableParameters.ConvergenceLimit = struct( ...
        'value', 0.01, ...
        'type', 'numeric', ...
        'range', [0, 0.1], ...
        'description', 'Average radius below which a sub‑population is considered converged.');

    % RandomFlag: Strategy for generating CR and F values (fixed or random).
    ConfigurableParameters.RandomFlag = struct( ...
        'value', 'Fixed CR/F', ...
        'type', 'option', ...
        'options', {{'Random CR/F', 'Fixed CR/F'}}, ...
        'description', 'Method for selecting CR and F parameters per individual.');

    % StrategyFlag: Differential evolution mutation strategy.
    ConfigurableParameters.StrategyFlag = struct( ...
        'value', 'DE/BEST/2', ...
        'type', 'option', ...
        'options', {{...
            'Random Strategy', ...
            'DE/RAND/1', ...
            'DE/RAND/2', ...
            'DE/BEST/1', ...
            'DE/BEST/2', ...
            'DE/RAND-TO-BEST/1', ...
            'DE/CURRENT-TO-RAND/1', ...
            'DE/CURRENT-TO-BEST/1'}}, ...
        'description', 'Mutation scheme for creating donor vectors in DE.');

    % DiversityFlag: (reserved – uncomment to enable diversity strategies)
    % ConfigurableParameters.DiversityFlag = struct( ...
    %     'value', 'Brownian Individuals', ...
    %     'type', 'option', ...
    %     'options', {{'Brownian Individuals', 'Quantum Individuals', 'Normal Individuals'}}, ...
    %     'description', 'Diversity maintenance strategy selection.');

end

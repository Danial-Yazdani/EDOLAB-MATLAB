%**************Generalized Moving Peaks Benchmark (GMPB)******************************************************************************
%Author: Danial Yazdani
%Last Edited: December 10, 2023
% e-mail: danial DOT yazdani AT gmail DOT com
% ------------
% Reference:
% ------------
%
%  D. Yazdani et al.,
%            "Benchmarking Continuous Dynamic Optimization: Survey and Generalized Test Suite,"
%            IEEE Transactions on Cybernetics, Vol. 52(5), 2020.
%
%  D. Yazdani et al.,
%            "IEEE CEC 2022 competition on dynamic optimization problems generated by generalized moving peaks benchmark,"
%            arXiv: 2106.06174, 2021.
%
% ------------
% Notification:
% ------------
%
% SIMPLIFIED VERSION of GMPB (only one sub-function, i.e., non-modular)
%
% --------
% License:
% --------
% This program is to be used under the terms of the GNU General Public License
% (http://www.gnu.org/copyleft/gpl.html).
% Author: Danial Yazdani
% e-mail: danial DOT yazdani AT gmail DOT com
% Copyright notice: (c) 2023 Danial Yazdani
%*************************************************************************************************************************************
function [result,Problem] = fitness_GMPB(X,Problem)
   x = X';
   f=NaN(1,Problem.PeakNumber);
   for k=1 : Problem.PeakNumber
       a = Transform((x - Problem.PeaksPosition(k,:,Problem.Environmentcounter)')'*Problem.RotationMatrix{Problem.Environmentcounter}(:,:,k)',Problem.tau(Problem.Environmentcounter,k),Problem.eta(k,:,Problem.Environmentcounter));
       b = Transform(Problem.RotationMatrix{Problem.Environmentcounter}(:,:,k) * (x - Problem.PeaksPosition(k,:,Problem.Environmentcounter)'),Problem.tau(Problem.Environmentcounter,k),Problem.eta(k,:,Problem.Environmentcounter));
       f(k) = Problem.PeaksHeight(Problem.Environmentcounter,k) - sqrt( a * diag(Problem.PeaksWidth(k,:,Problem.Environmentcounter)) * b);
   end
   result = max(f);
end

%% GMPB Function
function Y = Transform(X,tau,eta)
Y = X;
tmp = (X > 0);
Y(tmp) = log(X(tmp));
Y(tmp) = exp(Y(tmp) + tau*(sin(eta(1).*Y(tmp)) + sin(eta(2).*Y(tmp))));
tmp = (X < 0);
Y(tmp) = log(-X(tmp));
Y(tmp) = -exp(Y(tmp) + tau*(sin(eta(3).*Y(tmp)) + sin(eta(4).*Y(tmp))));
end